import { EditorState, Modifier } from 'draft-js';

export default {
  createColorBlockAtSelection(editorState, width) {
    const contentState = editorState
      .getCurrentContent()
      .createEntity('COLORBLOCK', 'MUTABLE', { width });
    const entityKey = contentState.getLastCreatedEntityKey();
    console.log(
      'created new entity',
      entityKey,
      contentState.getEntity(entityKey),
    );
    console.log('entity maps', contentState.getEntityMap());
    console.log('block maps', contentState.getBlockMap());
    // const withBlock = RichUtils.toggleLink(
    //   editorState,
    //   editorState.getSelection(),
    //   entityKey,
    // );
    // return EditorState.forceSelection(withBlock, editorState.getSelection());
    return EditorState.createWithContent(contentState);
  },

  removeEntity(editorState) {
    const contentState = editorState.getCurrentContent();
    const selectionState = editorState.getSelection();
    const startKey = selectionState.getStartKey();
    const contentBlock = contentState.getBlockForKey(startKey);
    const startOffset = selectionState.getStartOffset();
    const entity = contentBlock.getEntityAt(startOffset);

    if (!entity) {
      return editorState;
    }

    let entitySelection = null;

    contentBlock.findEntityRanges(
      character => character.getEntity() === entity,
      (start, end) => {
        entitySelection = selectionState.merge({
          anchorOffset: start,
          focusOffset: end,
        });
      },
    );

    const newContentState = Modifier.applyEntity(
      contentState,
      entitySelection,
      null,
    );

    const newEditorState = EditorState.push(
      editorState,
      newContentState,
      'apply-entity',
    );

    return newEditorState;
  },
};
